install.packages("ggplot2")
install.packages(c("dplyr", "nycflights13"))
# Dplyr
install.packages('dplyr')
# We will be using the NYC 2013 flights data during this examples, first install the package
install.packages('nycflights13')
library(dplyr)
# You will see: **The following objects are masked from âpackage:statsâ: filter, lag **
# This is becasue dplyr will have it's own filter() function and lag() function which is different from the usual filter function that come with the Base R package.
library(nycflights13)
head(flights)
head(flights)
install.packages("cli")
head(flights)
summary(flights)
# filter() function in dplyr allows us to select a subset of rows in a dataframe.
# it allows us to filter by conditions
filter(flights,month == 10, day == 4, carrier =='AA')
head(filter(flights, month == 10, day == 4, carrier == 'AA'))
# instead of using the dplyr, we can use the [ ] notation, it is long and messy :(
head(flights[flights$month == 10 & flights$day == 4 & flights$carrier == 'AA' , ]) # here I have to keep calling the dataframe name, and use the logical operators with '&' and combine them.
# slice() in dplyr
# slice() function  allows us to select rows by the position
slice(flights, 1:15) # selecting first 15 rows
# arrange() in dplyr
# arrange() function works similar to filter() function except that instead of filtering or selcting rows, it reorder the rows
arrange(flights,year,month,day, arr_time)
head(arrange(flights,year,month,day,arr_time))
# if I want to use the descending time instead of accending time,
head(arrange(flights,year,month,day, desc(arr_time)))
# select() in dplyr
select(flights,carrier)
head(select(flights,carrier))
# We can add aditional columns easily
head(select(flights, carrier, arr_time))
head(select(flights, carrier, arr_time, day))
head(rename(flights, airline.carrier = carrier))
head(select(flights, carrier, arr_time, day))
head(rename(flights, airline.carrier = carrier))
# distinct() in dplyr
# distinct() function in dplyr helps us to select the distinct or unique values in a column.
distinct(select(flights, carrier))
# mutate() in dplyr
# in additing to selecting sets of existing columns in the dataframe, sometimes
# we need to add new columns that are functions of existing columns in the dataframe.
# we can use the mutate() function to do that.
head(mutate(flights, MyNewColumn = arr_delay - dep_delay))
# If you only want to see the new column instead of calling the mutate, you can
# use the transmute() fuction.
# The difference between the mutate() and transmute() is that mutate() function returns
# the entire dataframe along with the new column and the transmute() shows only the new column.
head(transmute(flights, MyNewColumn = arr_delay - dep_delay))
head(rename(flights, airline.carrier = carrier))
help("summarise")
# summarise() in dplyr
# The summarize() allows us to summarize the data frame into a single row using another aggrigate function
summarise(flights, avg_air_time = mean(air_time, na.rm = TRUE)) # average airtime
summarise(flights, TotalFlightTime = sum(air_time, na.rm = TRUE)) # Total Flight Time
# sample_n() in dplyr
# sample_n() function allows us to pick random number of rows that we wish to choose:
sample_n(flights, 15) # random 15 rows.
# sample_n() in dplyr
# sample_n() function allows us to pick random number of rows that we wish to choose:
sample_n(flights, 15) # random 15 rows.
# sample_n() in dplyr
# sample_n() function allows us to pick random number of rows that we wish to choose:
sample_n(flights, 15) # random 15 rows.
# sample_n() in dplyr
# sample_n() function allows us to pick random number of rows that we wish to choose:
sample_n(flights, 15) # random 15 rows.
# sample_n() in dplyr
# sample_n() function allows us to pick random number of rows that we wish to choose:
sample_n(flights, 15) # random 15 rows.
sample_n(flights, 71) # random 71 rows.
summary(flights)
head(flights)
flights
sample_n(flights, 710000) # random 71 rows.
sample_n(flights, 71) # random 71 rows.
# sample_frac() in dplyr
# if you wan to pick a percentage of rows, sample_frac() function allow us to do that,
# you need to assign the fraction, example: 30% = 0.3, similaly 10% = 0.1
sample_frac(flights,0.1) # sample with a 10% of rows from the total number of rows
sample_frac(flights, 0.3) # sample with a 30% of rows from the total number of rows
sample_n(flights, 30)
sample_frac(flights, 0.5)
attach(EPI_data)
getwd()
setwd("C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data Analytics/GitRepo/Lab 1")
EPI_data <- read.csv(file.choose(),skip = 1,fill=FALSE,na.strings = "..",blank.lines.skip = TRUE)
attach(EPI_data)
summary(EPI) #Has lots of NA's
################# Comparisons #######################
stem(EPI,DALY)
################# Comparisons #######################
boxplot(EPI,DALY)
help("boxplot")
boxplot(EPI,DALY, title="boxplot(EPI,DALY)")
################# Comparisons #######################
help("boxplot")
boxplot(EPI,DALY)
title("boxplot(EPI,DALY)")
qqplot(EPI,DALY)
title("boxplot(EPI,DALY)")
title("qqplot(EPI,DALY)")
qqplot(EPI,DALY)
title("qqplot(EPI,DALY)")
#Multivariate Regression
getwd()
setwd("C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data Analytics/GitRepo/Lab 1 Part 2")
labdir<-"C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data Analytics/GitRepo/Lab 1 Part 2"
setwd(labdir)
multivariate<-read.csv(labdir %+% "multivariate.csv")
multivariate<-read.csv(labdir + "multivariate.csv")
multivariate<-read.csv(labdir & "multivariate.csv")
help(paste)
paste(labdir,"multivariate.csv")
paste(labdir,"/multivariate.csv")
datadir=paste(labdir,"/multivariate.csv")
multivariate<-read.csv(datadir)
datadir=paste(labdir,"/multivariate.csv",collapse = NULL)
multivariate<-read.csv(datadir)
datadir=paste(labdir,"/multivariate.csv",collapse = NULL)
datadir
datadir=paste(labdir,"/multivariate.csv",collapse = '')
datadir
datadir=paste0(labdir,"/multivariate.csv",collapse = '')
datadir
datadir=paste0(labdir,"/multivariate.csv")
datadir
multivariate<-read.csv(datadir)
head(multivariate)
attach(multivariate)
help(lm)
View(multivariate)
View(multivariate)
mm<-lm(Homeowners~Immigrant)
mm
summary(mm)
my_lm<-lm(Homeowners~Immigrant)
my_lm
summary(my_lm)
plot(Homeowners~Immigrant)
plot(Homeowners,Immigrant)
plot(Immigrant,Homeowners)
plot(Homeowners~Immigrant)
plot(Homeowners,Immigrant)
plot(Immigrant,Homeowners)
plot(Homeowners~Immigrant) #~ reverses order
mm<-lm(Immigrant,Homeowners)
help("abline")
abline(my_lm)
abline(my_lm,col=2,lwd=3)
newImmigrantdata<-data.frame(Immigrant=c(0,20))
newImmigrantdata
mm %>% predict(newImmigrantdata)
my_mm %>% predict(newImmigrantdata)
my_lm %>% predict(newImmigrantdata)
abline(my_lm)
abline(my_lm,col=3,lwd=3) #change color, line width
attributes(my_lm)
my_lm$coefficients
#Creating Plots
getwd()
labdir<-"C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data Analytics/GitRepo/Lab 1 Part 2"
setwd(labdir)
plot(mtcars$wt,mtcars$mpg)
library(ggplot2)
install(lifecycle)
install(ggplot2)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
install.packages("lifecycle")
library(ggplot2)
library(ggplot2)
qplot(mtcars$wt,mtcars$mpg)
plot(mtcars$wt,mtcars$mpg)
qplot(mtcars$wt,mtcars$mpg)
qplot(wt,mpg,data=mcars)
qplot(wt,mpg,data=mtcars)
qplot(mtcars$wt,mtcars$mpg)
qplot(wt,mpg,data=mtcars)
qplot(mtcars$wt,mtcars$mpg)
qplot(wt,mpg,data=mtcars)
qplot(mtcars$wt,mtcars$mpg)
qplot(wt,mpg,data=mtcars)
help(qplot)
qplot(wt,mpg,data=mtcars) #uses dataframe column names for axes
ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()
qplot(wt,mpg,data=mtcars) #uses dataframe column names for axes
ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()
ggplot(mtcars,aes(x=wt,y=mpg))
ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()
help(qplot)
#GGplot - make same graph
ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()
plot(pressure$temperature,pressure$pressure)
points(pressure$temperature,pressure$pressure)
#GGplot - make same graph
ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()
points(pressure$temperature,pressure$pressure)
plot(pressure$temperature,pressure$pressure)
plot(pressure$temperature,pressure$pressure, type=l)
plot(pressure$temperature,pressure$pressure, type="l")
points(pressure$temperature,pressure$pressure)
#Add points
points(pressure$temperature,pressure$pressure)
lines(pressure$temperature,pressure$pressure/2,col="red")
points(pressure$temperature,pressure$pressure/2, col="blue")
title("Plot a function from data")
library(ggplot2)
qplot(pressure$temperature,pressure$pressure,geom="line")
qplot(temperature,pressure, data=pressure,geom="line")
ggplot(pressure, aes(x=temperature,y=pressure))+geom_line()+geom_point()
barplot(BOD$demand,names.arg = BOD$Time)
table(mtcars$cyl)
barplot(table(mtcars$cyl))
mtcars$cyl
table(mtcars$cyl)
count(mtcars$cyl)
summary(mtcars$cyl)
str(mtcars$cyl)
barplot(mtcars$cyl)
qplot(mtcars$cyl)
qplot(factor(mtcars$cyl))
barplot(mtcars$cyl) #Does NOT work!!
barplot(table(mtcars$cyl)) #bar plot from counts
qplot(factor(mtcars$cyl))
qplot(mtcars$cyl)
qplot(factor(mtcars$cyl))
qplot(mtcars$cyl)
qplot(factor(mtcars$cyl)) #plotting discrete value
qplot(factor(cyl),data=mtcars)
qplot(factor(mtcars$cyl)) #plotting only represented discrete value
qplot(factor(cyl),data=mtcars)
qplot(mtcars$cyl) #plotting continuous numerical value
qplot(factor(mtcars$cyl)) #plotting only represented discrete value
qplot(factor(cyl),data=mtcars)
qplot(factor(mtcars$cyl),data=mtcars)
qplot(factor(mtcars$cyl)) #plotting only represented discrete value
qplot(factor(mtcars$cyl),data=mtcars)
ggplot(mcars,aes(x=factor(cyl))) + geom_bar()
ggplot(mcars,aes(x=factor(cyl))) + geom_bar()
qplot(mtcars$cyl) #plotting continuous numerical value
ggplot(mcars,aes(x=factor(cyl))) + geom_bar()
ggplot(mtcars,aes(x=factor(cyl))) + geom_bar()
qplot(factor(mtcars$cyl),data=mtcars) #No difference..
ggplot(mtcars,aes(x=factor(cyl))) + geom_bar()
#Creating Histograms
getwd()
labdir<-"C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data Analytics/GitRepo/Lab 1 Part 2"
setwd(labdir)
hist(mtcars$mpg)
hist(mtcars$mpg, breaks=10)
hist(mtcars$mpg, breaks=5)
hist(mtcars$mpg, breaks=12)
qplot(mpg,data=mtcars,binwidth=4)
ggplot(mtcars,aes(x=mpg))+geom_histogram(binwidth = 4)
ggplot(mtcars,aes(x=mpg))+geom_histogram(binwidth = 5)
#GGPlot Histograms
qplot(mpg,data=mtcars,binwidth=4)
hist(mtcars$mpg, breaks=12)
ggplot(mtcars,aes(x=mpg))+geom_histogram(binwidth = 5)
help("geom_histogram")
ggplot(mtcars,aes(x=mpg))+geom_histogram(binwidth = 4,pad=TRUE)
ggplot(mtcars,aes(x=mpg))+geom_histogram(binwidth = 5)
ggplot(mtcars,aes(x=mpg))+geom_histogram(binwidth = 5)
#Creating Box-plots
getwd()
labdir<-"C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data Analytics/GitRepo/Lab 1 Part 2"
setwd(labdir)
plot(ToothGrowth$supp,ToothGrowth$len)
plot(ToothGrowth$supp,ToothGrowth$len)
ToothGrowth
help(ToothGrowth)
#supplement type = Orange Juice (OJ) or Vitamin C (VC)
#Create Box plot for growth lenth for teeth for each supplement:
plot(ToothGrowth$supp,ToothGrowth$len)
#supplement type = Orange Juice (OJ) or Vitamin C (VC)
#Create Box plot for growth lenth for teeth for each supplement:
plot(ToothGrowth$supp,ToothGrowth$len)
boxplot(len~supp,data=ToothGrowth)
boxplot(len~supp,data=ToothGrowth)
boxplot(len~supp+dose,data=ToothGrowth)
boxplot(len~(supp+dose),data=ToothGrowth)
boxplot((len~supp)+dose,data=ToothGrowth)
)
boxplot(len~(supp+dose),data=ToothGrowth)
boxplot(len~supp+dose,data=ToothGrowth)
boxplot(len~supp,data=ToothGrowth)
boxplot(len~supp+dose,data=ToothGrowth)
#supplement type = Orange Juice (OJ) or Vitamin C (VC)
#Create Box plot for growth lenth for teeth for each supplement:
plot(ToothGrowth$supp,ToothGrowth$len)
boxplot(len~supp,data=ToothGrowth)
boxplot(len~supp+dose,data=ToothGrowth)
boxplot(len~supp,data=ToothGrowth)
boxplot(len~supp+dose,data=ToothGrowth)
library(ggplot2)
qplot(ToothGrowth$supp,ToothGrowth$len, geom="boxplot")
#vectors in same data fram:
qplot(supp,len,data=ToothGrowth,geom="boxplot")
#Full ggplot
ggplot(ToothGrowth,aes(x=supp,y=len))+geom_boxplot()
#3 vectors Quick Plot
qplot(interaction(ToothGrowth$supp,ToothGrowth$dose),ToothGrowth$len,geom="boxplot")
#3 vectors ggplot
ggplot(ToothGrowth,aes(x=interaction(supp,dose),y=len))+geom_boxplot()
head(flights)
summary(flights)
# filter() function in dplyr allows us to select a subset of rows in a dataframe.
# it allows us to filter by conditions
filter(flights,month == 10, day == 4, carrier =='AA')
head(filter(flights, month == 10, day == 4, carrier == 'AA'))
# instead of using the dplyr, we can use the [ ] notation, it is long and messy :(
head(flights[flights$month == 10 & flights$day == 4 & flights$carrier == 'AA' , ]) # here I have to keep calling the dataframe name, and use the logical operators with '&' and combine them.
# slice() in dplyr
# slice() function  allows us to select rows by the position
slice(flights, 1:15) # selecting first 15 rows
# arrange() in dplyr
# arrange() function works similar to filter() function except that instead of filtering or selcting rows, it reorder the rows
arrange(flights,year,month,day, arr_time)
head(arrange(flights,year,month,day,arr_time))
# if I want to use the descending time instead of accending time,
head(arrange(flights,year,month,day, desc(arr_time)))
# select() in dplyr
select(flights,carrier)
head(select(flights,carrier))
# We can add aditional columns easily
head(select(flights, carrier, arr_time))
head(select(flights, carrier, arr_time, day))
head(rename(flights, airline.carrier = carrier))
# distinct() in dplyr
# distinct() function in dplyr helps us to select the distinct or unique values in a column.
distinct(select(flights, carrier))
# mutate() in dplyr
# in additing to selecting sets of existing columns in the dataframe, sometimes
# we need to add new columns that are functions of existing columns in the dataframe.
# we can use the mutate() function to do that.
head(mutate(flights, MyNewColumn = arr_delay - dep_delay))
# If you only want to see the new column instead of calling the mutate, you can
# use the transmute() fuction.
# The difference between the mutate() and transmute() is that mutate() function returns
# the entire dataframe along with the new column and the transmute() shows only the new column.
head(transmute(flights, MyNewColumn = arr_delay - dep_delay))
# summarise() in dplyr
# The summarize() allows us to summarize the data frame into a single row using another aggrigate function
summarise(flights, avg_air_time = mean(air_time, na.rm = TRUE)) # average airtime
summarise(flights, TotalFlightTime = sum(air_time, na.rm = TRUE)) # Total Flight Time
# sample_n() in dplyr
# sample_n() function allows us to pick random number of rows that we wish to choose:
sample_n(flights, 15) # random 15 rows.
sample_n(flights, 71) # random 71 rows.
# sample_frac() in dplyr
# if you wan to pick a percentage of rows, sample_frac() function allow us to do that,
# you need to assign the fraction, example: 30% = 0.3, similaly 10% = 0.1
sample_frac(flights,0.1) # sample with a 10% of rows from the total number of rows
sample_frac(flights, 0.3) # sample with a 30% of rows from the total number of rows
sample_n(flights, 30)
sample_frac(flights, 0.5)
# Pipe operator:  %>%
library(dplyr)
df_mtcars <- mtcars
head(df_mtcars)
# nesting
filter(df_mtcars, mpg > 20) # filter mpg > 20
# we want to get 10 samples of that
sample_n(filter(df_mtcars, mpg > 20), 10)
# now we want to arrange them in the descending order based on the mpg
arrange( sample_n(filter(df_mtcars, mpg >20), 10) ,desc(mpg))
# we can assign this result to a variable called results_mpg
results_mpg <- arrange( sample_n(filter(df_mtcars, mpg >20), 10) ,desc(mpg))
results_mpg
# You can do the above using the Pipe Operator %>%
# You can do the above using the Pipe Operator %>%
# dataFrame %>% op1 %>% op2 <$op3
# You can do the above using the Pipe Operator %>%
# dataFrame %>% op1 %>% op2 <$op3
# You can do the above using the Pipe Operator %>%
# dataFrame %>% op1 %>% op2 <$op3
# You can do the above using the Pipe Operator %>%
# dataFrame %>% op1 %>% op2 <$op3
# You can do the above using the Pipe Operator %>%
# dataFrame %>% op1 %>% op2 <$op3
