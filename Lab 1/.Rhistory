install.packages("MASS")
installed.packages()
install.packages("ISLR")
install.packages("ISLR")
days<-c('Mon','Tues',"Wed",'Thurs','Fri','Sat','Sun')
temp<-c(28,30.5,32,31.2,29.3,27.9,26.4)
snowed<-c('T','T','F','F','T','T','F')
help("data.frame")
RPI_Weather_Week<-data.frame(days,temp,snowed)
RPI_Weather_Week
head(RPI_Weather_Week)
str(RPI_Weather_Week)
summary(RPI_Weather_Week)
RPI_Weather_Week[1,]
RPI_Weather_Week[,1]
RPI_Weather_Week[,'snowed']
RPI_Weather_Week[,'days']
RPI_Weather_Week[,'temp']
RPI_Weather_Week[1:5,c("days","temp")]
RPI_Weather_Week$temp
RPI_Weather.week
days<-c('Mon','Tues',"Wed",'Thurs','Fri','Sat','Sun') #days
temp<-c(28,30.5,32,31.2,29.3,27.9,26.4) #temperature in F during winter
snowed<-c('T','T','F','F','T','T','F') #Flag for days snowed
help("data.frame")
RPI_Weather_Week<-data.frame(days,temp,snowed) #create dataframe
RPI_Weather_Week
head(RPI_Weather_Week) #head of the dataframe (Only shows first 6 rows!)
str(RPI_Weather_Week) #look at structrure of dataframe
summary(RPI_Weather_Week) #summary of dataframe
#Select various data from dataframe
RPI_Weather_Week[1,] #show 1st row
RPI_Weather_Week[,1] #show 1st column
RPI_Weather_Week[,'snowed']
RPI_Weather_Week[,'days']
RPI_Weather_Week[,'temp']
RPI_Weather_Week[1:5,c("days","temp")]
#Filter days that have snowed
RPI_Weather_Week$temp
subset(RPI_Weather_Week,subset = snowed==TRUE)
help(subset)
subset(RPI_Weather_Week,subset = snowed=='T')
#Reorder with days snowed first
sorted_snowed<-order(RPI_Weather_Week['snowed'])
sorted_snowed
RPI_Weather_Week[sorted_snowed,]
help(order)
descending_snow<-order(RPI_Weather_Week['snowed'],decreasing = TRUE)
descending_snow
RPI_Weather_Week(desce)
RPI_Weather_Week(descending_snow)
RPI_Weather_Week[descending_snow]
RPI_Weather_Week[descending_snow,]
#another way
dec_snow<order(-RPI_Weather_Week$temp)
#another way
dec_snow<-order(-RPI_Weather_Week$temp)
dec_snow
RPI_Weather_Week[dec_snow,]
#Creating Dataframes
empty_DataFrame <- data.frame()
empty_DataFrame
v1<1:10
v1
v1<-1:10
v1
letters
v2<-letters[1:10]
v2
df<-data.frame(col_name_1 = v1, col_name_2=v2)
df
help("write.csv")
getwd
getwd()
setwd("C:\Program Files\R\Workspace")
help("setwd")
getwd()
setwd("C")
setwd("C:")
getwd()
setwd("C:/Program Files/R/Workspace")
getwd() #Found online, path is Windows/System32, don't want to save here
getwd() #Found online, path is Windows/System32, don't want to save here
setwd("C:/Program Files/RStudio/Workspace")
getwd() #Found online, path is Windows/System32, don't want to save here
write.csv(df,file='saved_df1.csv')
setwd("C:/Users/ebelw/RStudioWorkspace") #Change woking directory
getwd()
write.csv(df,file='saved_df1.csv')
df2 <- read.csv('saved_df1.csv')
df2
getwd
getwd()
setwd("C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data\Analytics/GitRepo")
setwd("C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data Analytics/GitRepo/Lab1")
setwd("C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data\\ Analytics/GitRepo/Lab1")
setwd("C:/Users/ebelw/Documents/")
setwd("C:/Users/ebelw/Documents/Users")
setwd("C:/Users/ebelw/Documents/RPI")
setwd("C:/Users/ebelw/Documents/RPI/2020_01_Spring")
setwd("C:/Users/ebelw/Documents/RPI/2020_1_Spring")
setwd("C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data Analytics")
setwd("C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data Analytics/GitRepo/Lab 1")
getwd()
itRepo/Lab 1
setwd("C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data Analytics/GitRepo/Lab 1")
help("read.csv")
GPW3<-read.csv('GPW3_GRUMP_SummaryInformation_2010.csv')
GPW3
head(GPW3)
str(GPW3)
fix(GPW)
View(GPW3)
EPI_data <- read.csv(file.choose(),skip = 1,fill=FALSE,na.strings = "..",blank.lines.skip = TRUE)
attach(EPI_data)
EPI_data
EPI
Summary(EPI_)
Summary(EPI)
summary(EPI)
EPI_FilledRows<-complete.cases(EPI)
EPI_Filtered<-EPI(EPI_Filter)
EPI_Filtered<-EPI[EPI_Filter,]
EPI_Filter<-complete.cases(EPI)
EPI_Filtered<-EPI[EPI_Filter,]
EPI_Filtered<-EPI_data[EPI_Filter,EPI]
EPI_Filtered<-EPI_data[EPI_Filter,$EPI]
EPI_Filtered<-EPI_data[EPI_Filter,'EPI']
summary(EPI_Filtered)
EPI_Filtered<-EPI(EPI_Filter)
EPI_Filtered<-EPI[EPI_Filter]
summary(EPI_Filtered)
fivenum(EPI)
help("fivenum")
fivenum(EPI,na.rm=TRUE)
fivenum(EPI)
stem(EPI)
stem(EPI_Filtered)
stem(EPI)
hist(EPI)
help(hist)
hist(EPI,seq(30,95,1),prob=TRUE)
hist(EPI,breaks=seq(30,95,1),prob=TRUE)
help(hist)
help(lines)
lines(density(EPI,bw=1))
lines(density(EPI,na.rm=TRUE,bw=1))
help(lines)
help(density)
lines(density(EPI,na.rm=TRUE,bw="SJ"))
rug(EPI)
help(ecdf)
help(ecdf)
help(plot)
plot(ecdf(EPI),do.points=FALSE,verticals=TRUE)
help(plot)
plot(ecdf(EPI),do.points=FALSE,verticals=FALSE)
plot(ecdf(EPI),do.points=FALSE,verticals=TRUE)
plot(ecdf(EPI),do.points=TRUE,verticals=TRUE)
plot(ecdf(EPI),do.points=FALSE,verticals=TRUE)
plot.ecdf(EPI,do.points=FALSE,verticals=FALSE)
plot.ecdf(EPI,do.points=FALSE,verticals=TRUE)
plot(ecdf(EPI),do.points=FALSE,verticals=TRUE)
plot.ecdf(EPI,do.points=FALSE,verticals=TRUE)
plot(ecdf(EPI),do.points=FALSE,verticals=TRUE)
help(plot)
plot(ecdf(EPI),do.points=FALSE,verticals=TRUE,main="Title")
plot(ecdf(EPI),do.points=FALSE,verticals=TRUE,main="ECDF of EPI",sub="(Empirical Cumulative Density Function")
plot(ecdf(EPI),do.points=FALSE,verticals=TRUE,main="ECDF of EPI",sub="Empirical Cumulative Density Function")
plot(ecdf(EPI),do.points=FALSE,verticals=TRUE,main="ECDF of EPI",sub="Empirical Cumulative Density Function",xlab="EPI",ylab="ecdf(EPI)")
help(par)
help(ecdf) #creates ecdf
help(plot)
help(par)
par(pty='s')
help(par)
plot(ecdf(EPI),do.points=FALSE,verticals=TRUE,main="ECDF of EPI",sub="Empirical Cumulative Density Function",xlab="EPI",ylab="ecdf(EPI)")
help(qqnorm)
help(qqline)
qqnorm(EPI)
qqline(EPI)
qqplot(qt(ppoints(250),df=5),x,xlab="Q-Q plot for t dsn")
x<seq(30,95,1)
x<-seq(30,95,1)
qqplot(qt(ppoints(250),df=5),x,xlab="Q-Q plot for t dsn")
qqline(x)
help(qt)
qqplot(qt(ppoints(250),df=10),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(250),df=50),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(250),df=500),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(250),df=5),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(2500),df=5),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(2500),df=50),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(250),df=50),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(20),df=50),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(20),df=5000),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(2),df=5000),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(10),df=5000),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(1000),df=5000),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(10000),df=5000),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(10000),df=50),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(10000),df=5),x,xlab="Q-Q plot for t dsn")
qqplot(qt(ppoints(250),df=5),x,xlab="Q-Q plot for t dsn")
help(qt) #Creates a Student t Distribution
##########Q-Q Plots#############
help(qqnorm)
qnorm(qt(ppoints(250),df=5))
help(qt) #Creates a Student t Distribution
qt_test<-qt(ppoints(250),df=5)
qt_test
qnorm(qt_test)
qnorm(qt(ppoints(250),df=50))
qnorm(qt(ppoints(2500),df=50))
qnorm(qt(ppoints(20),df=50))
##########Q-Q Plots#############
help(qqnorm)
DALY
DALY
summary(DALY) #Has lots of NA's
DALY_Filter<-complete.cases(DALY) #vector of rows w/o NA
DALY_Filtered<-DALY[DALY_Filter] #Index filled rows
summary(DALY_Filtered) #Same data w/o NA's
fivenum(DALY,na.rm=TRUE)
fivenum(DALY) #Produces same result! Must just help with speed to strip out NAs?
stem(DALY)#Stem Plot
hist(DALY)
stem(EPI)#Stem Plot
stem(DALY)#Stem Plot
hist(DALY,breaks=seq(0,95,1),prob=TRUE) #set spacing, use density (area=1)
hist(DALY,breaks=seq(0,95,2),prob=TRUE) #set spacing, use density (area=1)
hist(DALY,breaks=seq(0,95,1.5),prob=TRUE) #set spacing, use density (area=1)
hist(DALY,breaks=seq(0,95,2),prob=TRUE) #set spacing, use density (area=1)
hist(DALY,breaks=seq(0,95,4),prob=TRUE) #set spacing, use density (area=1)
hist(DALY,breaks=seq(0,95,6),prob=TRUE) #set spacing, use density (area=1)
hist(DALY,breaks=seq(0,95,10),prob=TRUE) #set spacing, use density (area=1)
hist(DALY,breaks=seq(0,95,1),prob=TRUE) #set spacing, use density (area=1)
hist(DALY,breaks=seq(0,95,1.5),prob=TRUE) #set spacing, use density (area=1)
lines(density(EPI,na.rm=TRUE,bw=1)) #bandwith=1, jagged line
lines(density(EPI,na.rm=TRUE,bw="SJ")) #automatic bandwidth, smoother line
hist(DALY,breaks=seq(0,95,1.5),prob=TRUE) #set spacing, use density (area=1)
lines(density(DALY,na.rm=TRUE,bw=1)) #bandwidth = 1
lines(density(DALY,na.rm=TRUE,bw="SJ")) #automatic bandwidth, smoother line
rug(DALY) #Add rug
plot(ecdf(DALY),do.points=FALSE,verticals=TRUE,main="ECDF of DALY",sub="Empirical Cumulative Density Function",xlab="DALY",ylab="ecdf(DALY)")
par(pty='s') #Used to set/get plot parameters, this sets plot region to square
#Must replot after setting plot parameter:
plot(ecdf(DALY),do.points=FALSE,verticals=TRUE,main="ECDF of DALY",sub="Empirical Cumulative Density Function",xlab="DALY",ylab="ecdf(DALY)")
qqnorm(DALY) #Creates Q-Q plot against the normal distribution
#Notice slight curvature - data skewed
qqline(DALY) #Adds line through quantiles
################# WATER_H #######################
WATER_H
summary(WATER_H) #Has lots of NA's
WATER_H_Filter<-complete.cases(WATER_H) #vector of rows w/o NA
WATER_H_Filtered<-WATER_H[WATER_H_Filter] #Index filled rows
summary(WATER_H_Filtered) #Same data w/o NA's
fivenum(WATER_H)
fivenum(WATER_H,rm.na=TRUE)
fivenum(WATER_H,na.rm=TRUE)
fivenum(WATER_H)
stem(WATER_H)#Data 0 to 92
hist(WATER_H)
hist(WATER_H,breaks=seq(0,100,2),prob=TRUE) #set spacing, use density (area=1)
hist(WATER_H,breaks=seq(0,100,1.5),prob=TRUE) #set spacing, use density (area=1)
hist(WATER_H,breaks=seq(0,100,2.5),prob=TRUE) #set spacing, use density (area=1)
hist(WATER_H,breaks=seq(0,100,1),prob=TRUE) #set spacing, use density (area=1)
hist(WATER_H,breaks=seq(0,100,2),prob=TRUE) #set spacing, use density (area=1)
lines(density(WATER_H,na.rm=TRUE,bw=1)) #bandwidth = 1
lines(density(WATER_H,na.rm=TRUE,bw="SJ")) #automatic bandwidth, smoother line
rug(WATER_H) #Add rug
qqnorm(WATER_H) #Creates Q-Q plot against the normal distribution
#S-Shape means tails are thicker than normal distribution
qqline(WATER_H) #Adds line through quantiles
