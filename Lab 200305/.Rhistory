# creating a matrix data with random numbers
# and plotting the matrix using the image() function
# you will see there,it does not have a real pattern in the plot.
set.seed(12345)
help(par)
# par can be used to set or query graphical parameters.
# Parameters can be set by specifying them as arguments
# to par in tag = value form, or by passing them as a list of tagged values.
par(mar = rep(0.2,4))
data_Matrix<-matrix(rnorm(400), nrow= 40)
image(1:10, 1:40, t(data_Matrix)[,nrow(data_Matrix):1])
par(mar=rep(0.2,4))
heatmap(data_Matrix)
help("rbinom")
set.seed(678910)
for(i in 1:40){
coin_Flip=rbinorm(1,size=1,prob=0.5)
if(coin_Flip){
data_Matrix[i,]=data_Matrix[i,]+rep(c(0,3),each=5)
}
}
set.seed(678910)
for(i in 1:40){
coin_Flip=rbinom(1,size=1,prob=0.5)
if(coin_Flip){
data_Matrix[i,]=data_Matrix[i,]+rep(c(0,3),each=5)
}
}
par(mar= rep(0.2, 4))
image(1:10, 1:40, t(data_Matrix)[, nrow(data_Matrix):1])
par(mar=rep(0.2, 4))
heatmap(data_Matrix)
hh=hclust(dist(data_Matrix))
data_Matrix_Ordered=data_Matrix[hh$order,]
par(mfrow=c(1,3))
image(t(data_Matrix_Ordered)[,nrow(data_Matrix_Ordered):1])
plot(rowMeans(data_Matrix_Ordered),40:1,xlab='The Row Mean',ylab='Row',pch=19)
plot(colMeans(data_Matrix_Ordered),xlab='Column',ylab='Column Mean',pch=19)
help(par)
par(mar = rep(0.2,4))
data_Matrix<-matrix(rnorm(400), nrow= 40)
mar
data_Matrix=matrix(rnorm(400), nrow= 40)
data_Matrix
help(rnorm)
rnorm(400)
image(1:10, 1:40, t(data_Matrix)[,nrow(data_Matrix):1])
help(image)
#image displays a color image
image(1:5, 1:40, t(data_Matrix)[,nrow(data_Matrix):1])
#image displays a color image
image(1:10, 1:40, t(data_Matrix)[,nrow(data_Matrix):1])
#image displays a color image
image(1:20, 1:40, t(data_Matrix)[,nrow(data_Matrix):1])
#image displays a color image
image(1:10, 1:40, t(data_Matrix)[,nrow(data_Matrix):1])
#image displays a color image
image(1:10, 1:20, t(data_Matrix)[,nrow(data_Matrix):1])
#image displays a color image
image(1:10, 1:40, t(data_Matrix)[,nrow(data_Matrix):1])
help(t)
help(titanic)
help(Titanic)
help(t)
data_Matrix
t(data_Matrix)
nrow(data_Matrix)
nrow(data_Matrix):1
t(data_Matrix)
t(data_Matrix)[,nrow(data_Matrix):1]
#image displays a color image (rows,columns,matrix w/ values)
#t() transposes the matrix
#nrow(data_Matrix):1 = 40,39,38...3,2,1
image(1:10, 1:40, t(data_Matrix)[,nrow(data_Matrix):1])
help(image)
#image displays a color image (x-grid,y-grid,matrix w/ values)
#the image data matrix must be in (x,y) form which is (col,row)
#to get (0,0) at bottom-left, we must transpose and flip horizontal:
#t() transposes the matrix
#nrow(data_Matrix):1 = 40,39,38...3,2,1
image(1:10, 1:40, t(data_Matrix)[,nrow(data_Matrix):1])
par(mar=rep(0.2,4))
heatmap(data_Matrix)
par(mar = rep(0.2,4)) #margin as c(bottom,left,top,right)
#matrix(numbers,nrows) creates 40 rows x 10 columns (400 numbers)
#rnorm picks number following the normal distribution
data_Matrix=matrix(rnorm(400), nrow= 40)
#image displays a color image (x-grid,y-grid,matrix w/ values)
#the image data matrix must be in (x,y) form which is (col,row)
#to get (0,0) at bottom-left, we must transpose and flip horizontal:
#t() transposes the matrix
#nrow(data_Matrix):1 = 40,39,38...3,2,1
image(1:10, 1:40, t(data_Matrix)[,nrow(data_Matrix):1])
par(mar=rep(0.2,4))
heatmap(data_Matrix)
help(heatmap)
#image displays a color image (x-grid,y-grid,matrix w/ values)
#the image data matrix must be in (x,y) form which is (col,row)
#to get (0,0) at bottom-left, we must transpose and flip horizontal:
#t() transposes the matrix
#nrow(data_Matrix):1 = 40,39,38...3,2,1
image(1:10, 1:40, t(data_Matrix)[,nrow(data_Matrix):1])
par(mar=rep(0.2,4)) #Set margins again
heatmap(data_Matrix) #draw heatmap
help(heatmap)
help("rbinom")
help(rep)
set.seed(678910)
for(i in 1:40){ #loop through the 40 rows
coin_Flip=rbinom(1,size=1,prob=0.5) #50% probablility
if(coin_Flip){
data_Matrix[i,]=data_Matrix[i,]+rep(c(0,3),each=5) #if the outcome is true, add 0,3,0,3,0,3,0,3,0,3 to each row
}
}
par(mar= rep(0.2, 4))
image(1:10, 1:40, t(data_Matrix)[, nrow(data_Matrix):1])
#matrix(numbers,nrows) creates 40 rows x 10 columns (400 numbers)
#rnorm picks number following the normal distribution
data_Matrix=matrix(rnorm(400), nrow= 40)
#image displays a color image (x-grid,y-grid,matrix w/ values)
#the image data matrix must be in (x,y) form which is (col,row)
#to get (0,0) at bottom-left, we must transpose and flip horizontal:
#t() transposes the matrix
#nrow(data_Matrix):1 = 40,39,38...3,2,1
image(1:10, 1:40, t(data_Matrix)[,nrow(data_Matrix):1])
#heatmap performs image(t(x)) but also adds dendogram & reorders rows & columns
#The reordering is a heirarchichal clustering method - we don't see muct here b/c data is random
help(heatmap)
par(mar=rep(0.2,4)) #Set margins again
heatmap(data_Matrix) #draw heatmap
help("rbinom")
set.seed(678910)
for(i in 1:40){ #loop through the 40 rows
coin_Flip=rbinom(1,size=1,prob=0.5) #50% probablility
if(coin_Flip){
data_Matrix[i,]=data_Matrix[i,]+rep(c(0,3),each=5) #if the outcome is true, add 0 0 0 0 0 3 3 3 3 3 to this row
}
}
par(mar= rep(0.2, 4))
image(1:10, 1:40, t(data_Matrix)[, nrow(data_Matrix):1])
par(mar=rep(0.2, 4))
heatmap(data_Matrix)
image(1:10, 1:40, t(data_Matrix)[, nrow(data_Matrix):1])
par(mar=rep(0.2, 4))
heatmap(data_Matrix)
hh=hclust(dist(data_Matrix))
data_Matrix_Ordered=data_Matrix[hh$order,]
par(mfrow=c(1,3))
image(t(data_Matrix_Ordered)[,nrow(data_Matrix_Ordered):1])
help("hclust")
help(hclust)
help(dist)
hh
dist(data_Matrix)
help(hclust)
hh$order
#distance matrix calculation:
#matrix is taken row by row with the columns representing coordinates
#so 40 row by 10 column matrix is treated as 40 points in a 10-dimensional space
#euclidean distance is calculated between each pair of points and placed in distance matrix
data_Matrix_Ordered=data_Matrix[hh$order,]
par(mfrow=c(1,3))
image(t(data_Matrix_Ordered)[,nrow(data_Matrix_Ordered):1])
#distance matrix calculation:
#matrix is taken row by row with the columns representing coordinates
#so 40 row by 10 column matrix is treated as 40 points in a 10-dimensional space
#euclidean distance is calculated between each pair of points and placed in distance matrix
data_Matrix_Ordered=data_Matrix[hh$order,]
help(par)
par(mfrow=c(1,3))
image(t(data_Matrix_Ordered)[,nrow(data_Matrix_Ordered):1])
plot(rowMeans(data_Matrix_Ordered),40:1,xlab='The Row Mean',ylab='Row',pch=19)
plot(colMeans(data_Matrix_Ordered),xlab='Column',ylab='Column Mean',pch=19)
help(plot)
install.packages("gdata")
install.packages("kknn")
library(gdata)
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
bronx1=read.csv('rollingsales_brooklyn.csv',header=TRUE,skip = 4,strip.white = TRUE,na.strings = "")
setwd("C:\Users\ebelw\Documents\RPI\2020_1_Spring\Data Analytics\GitRepo\Lab 200305")
setwd("C:/Users/ebelw/Documents/RPI/2020_1_Spring/Data Analytics/GitRepo/Lab 200305")
bronx1=read.csv('rollingsales_bronx.csv',header=TRUE,skip = 4,strip.white = TRUE,na.strings = "")
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="$0"),]
bronx1=bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="$0"),]
#alternate
#library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
#bronx1<-read.xlsx("<SOMEWHERE>/rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
View(bronx1)
#
attach(bronx1) # If you choose to attach, leave out the "data=." in lm regression
SALE.PRICE<-sub("\\$","",SALE.PRICE)
SALE.PRICE<-as.numeric(gsub(",","", SALE.PRICE))
GROSS.SQUARE.FEET<-as.numeric(gsub(",","", GROSS.SQUARE.FEET))
LAND.SQUARE.FEET<-as.numeric(gsub(",","", LAND.SQUARE.FEET))
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET))
summary(m1)
abline(m1,col="red",lwd=2)
plot(resid(m1))
# Model 2
m2=lm(log(bronx1$SALE.PRICE)~log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD))
# Model 2
m2=lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET)+log(LAND.SQUARE.FEET)+factor(NEIGHBORHOOD))
summary(m2)
plot(resid(m2))
plot(resid(m2))
# Suppress intercept - using "0+ ..."
m2a<-lm(log(SALE.PRICE)~0+log(GROSS.SQUARE.FEET)+log(LAND.SQUARE.FEET)+factor(NEIGHBORHOOD))
summary(m2a)
plot(resid(m2a))
# Model 2
m2=lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET)+log(LAND.SQUARE.FEET)+factor(NEIGHBORHOOD))
summary(m2)
plot(resid(m2))
# Suppress intercept - using "0+ ..."
m2a<-lm(log(SALE.PRICE)~0+log(GROSS.SQUARE.FEET)+log(LAND.SQUARE.FEET)+factor(NEIGHBORHOOD))
summary(m2a)
plot(resid(m2a))
# Model 3
m3<-lm(log(SALE.PRICE)~0+log(GROSS.SQUARE.FEET)+log(LAND.SQUARE.FEET)+factor(NEIGHBORHOOD)+factor(BUILDING.CLASS.CATEGORY))
summary(m3)
plot(resid(m3))
# Model 4
m4<-lm(log(SALE.PRICE)~0+log(GROSS.SQUARE.FEET)+log(LAND.SQUARE.FEET)+factor(NEIGHBORHOOD)*factor(BUILDING.CLASS.CATEGORY))
summary(m4)
plot(resid(m4))
#
detach(bronx1)
bronx1$SALE.PRICE<-sub("\\$","",bronx1$SALE.PRICE)
bronx1$SALE.PRICE<-as.numeric(gsub(",","", bronx1$SALE.PRICE))
bronx1$GROSS.SQUARE.FEET<-as.numeric(gsub(",","", bronx1$GROSS.SQUARE.FEET))
bronx1$LAND.SQUARE.FEET<-as.numeric(gsub(",","", bronx1$LAND.SQUARE.FEET))
bronx1$SALE.DATE<- as.Date(gsub("[^]:digit:]]","",bronx1$SALE.DATE))
bronx1$YEAR.BUILT<- as.numeric(gsub("[^]:digit:]]","",bronx1$YEAR.BUILT))
bronx1$ZIP.CODE<- as.character(gsub("[^]:digit:]]","",bronx1$ZIP.CODE))
minprice<-10000
bronx1<-bronx1[which(bronx1$SALE.PRICE>=minprice),]
nval<-dim(bronx1)[1]
bronx1$ADDRESSONLY<- gsub("[,][[:print:]]*","",gsub("[ ]+","",trim(bronx1$ADDRESS))) bronxadd<-unique(data.frame(bronx1$ADDRESSONLY, bronx1$ZIP.CODE,stringsAsFactors=FALSE)) names(bronxadd)<-c("ADDRESSONLY","ZIP.CODE") bronxadd<-bronxadd[order(bronxadd$ADDRESSONLY),] duplicates<-duplicated(bronx1$ADDRESSONLY)
bronx1$ADDRESSONLY<- gsub("[,][[:print:]]*","",gsub("[ ]+","",trim(bronx1$ADDRESS)))
bronxadd<-unique(data.frame(bronx1$ADDRESSONLY, bronx1$ZIP.CODE,stringsAsFactors=FALSE))
names(bronxadd)<-c("ADDRESSONLY","ZIP.CODE")
bronxadd<-bronxadd[order(bronxadd$ADDRESSONLY),]
duplicates<-duplicated(bronx1$ADDRESSONLY)
for(i in 1:2345) {
if(duplicates[i]==FALSE) dupadd<-bronxadd[bronxadd$duplicates,1]
}#what are we doing with dupadd?
nsample=450
addsample<-bronxadd[sample.int(dim(bronxadd),size=nsample),]#I use nval here
# may need to install this package
library(ggmap)
install.packages(ggmap)
install.packages("ggmap")
# may need to install this package
library(ggmap)
addrlist<-paste(addsample$ADDRESSONLY, "NY", addsample$ZIP.CODE, "US", sep=" ")
querylist<-geocode(addrlist) #This is cool. Take a break.
matched<-(querylist$lat!=0 &&querylist$lon!=0) addsample<-cbind(addsample,querylist$lat,querylist$lon)
querylist<-geocode(addrlist) #This is cool. Take a break.
matched<-(querylist$lat!=0 &&querylist$lon!=0) addsample<-cbind(addsample,querylist$lat,querylist$lon)
help("geocode")
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
plot(resid(m1))
plot(resid(m2))
plot(resid(m1))
plot(resid(m2))
plot(resid(m1))
plot(resid(m2))
plot(resid(m2a))
plot(resid(m3))
plot(resid(m2a))
plot(resid(m3))
plot(resid(m4))
plot(resid(m4))
#
detach(bronx1)
minprice<-10000
bronx1<-bronx1[which(bronx1$SALE.PRICE>=minprice),]
nval<-dim(bronx1)[1]
bronx1$ADDRESSONLY<- gsub("[,][[:print:]]*","",gsub("[ ]+","",trim(bronx1$ADDRESS)))
bronx1$ADDRESSONLY
bronxadd<-unique(data.frame(bronx1$ADDRESSONLY, bronx1$ZIP.CODE,stringsAsFactors=FALSE))
names(bronxadd)<-c("ADDRESSONLY","ZIP.CODE")
bronxadd<-bronxadd[order(bronxadd$ADDRESSONLY),]
help("duplicated")
duplicates<-duplicated(bronx1$ADDRESSONLY)
duplicates
for(i in 1:2345) {
if(duplicates[i]==FALSE) dupadd<-bronxadd[bronxadd$duplicates,1]
}#what are we doing with dupadd?
View(bronxadd)
View(bronxadd)
for(i in 1:2345) {
if(duplicates[i]==FALSE) dupadd<-bronxadd[bronxadd$duplicates,1]
}#what are we doing with dupadd?
nsample=450
addsample<-bronxadd[sample.int(dim(bronxadd),size=nsample),]#I use nval here
# may need to install this package
library(ggmap)
addrlist<-paste(addsample$ADDRESSONLY, "NY", addsample$ZIP.CODE, "US", sep=" ")
querylist<-geocode(addrlist) #This is cool. Take a break.
?register_google
querylist<-geocode(addrlist) #This is cool. Take a break.
#Query list doesn't work this way b/c goodle requires an api key
#"Must first enable the Google Geocoding API in the Google Cloud Platform Console"
?register_google
register_google(key='AIzaSyBdBS4R_gcGnSLyNDsoAKqY1XzXC3Ajs_8')
querylist<-geocode(addrlist) #This is cool. Take a break.
querylist<-geocode(addrlist) #This is cool. Take a break.
querylist<-geocode(addrlist) #This is cool. Take a break.
querylist<-geocode(addrlist) #This is cool. Take a break.
View(querylist)
View(querylist)
help("geocode")
querylist<-geocode(addrlist) #This is cool. Take a break.
View(querylist)
View(querylist)
matched<-(querylist$lat!=0 &&querylist$lon!=0) addsample<-cbind(addsample,querylist$lat,querylist$lon)
matched<-(querylist$lat!=0 &&querylist$lon!=0)
addsample<-cbind(addsample,querylist$lat,querylist$lon)
names(addsample)<-c("ADDRESSONLY","ZIPCODE","Latitude","Longitude")# correct the column na adduse<-merge(bronx1,addsample)
adduse<-adduse[!is.na(adduse$Latitude),]
View(addsample)
adduse<-merge(bronx1,addsample)
adduse<-adduse[!is.na(adduse$Latitude),]
mapcoord<-adduse[,c(2,3,24,25)]
table(mapcoord$NEIGHBORHOOD)
mapcoord$NEIGHBORHOOD <- as.factor(mapcoord$NEIGHBORHOOD)
map <- get_map(location = 'Bronx', zoom = 12)#Zoom 11 or 12
help("get_map")
mapcoord$NEIGHBORHOOD <- as.factor(mapcoord$NEIGHBORHOOD)
View(hh)
View(mapcoord)
map <- get_map(location = 'Bronx', zoom = 12)#Zoom 11 or 12
map <- get_map(location = c(40.8448,-73.8648), zoom = 12)#Zoom 11 or 12
map <- get_map(location = c(lon=-73.8648,lat=40.8448), zoom = 12)#Zoom 11 or 12
map <- get_map(location = c(lon=-73.8648,lat=40.8448), zoom = 12)#Zoom 11 or 12
map <- get_map(location = 'bronx', zoom = 12)#Zoom 11 or 12
map <- get_map(location = c(lon=-73.8648,lat=40.8448), zoom = 12)#Zoom 11 or 12
map <- get_map(location = c(lon=-73.8648,lat=40.8448), zoom = 12)#Zoom 11 or 12, had to get lat & lon
ggmap(map) + geom_point(aes(x = mapcoord$Longitude, y = mapcoord$Latitude, size =1, color=mapcoord$NEIGHBORHOOD), data = mapcoord) +theme(legend.position = "none")
mapmeans<-cbind(adduse,as.numeric(mapcoord$NEIGHBORHOOD))
colnames(mapmeans)[26] <- "NEIGHBORHOOD" #This is the right way of renaming.
keeps <- c("ZIP.CODE","NEIGHBORHOOD","TOTAL.UNITS","LAND.SQUARE.FEET","GROSS.SQUARE.FEET","SALE.PRICE","Latitude","Longitude")
mapmeans<-mapmeans[keeps]#Dropping others
mapmeans$NEIGHBORHOOD<-as.numeric(mapcoord$NEIGHBORHOOD)
for(i in 1:8){
mapmeans[,i]=as.numeric(mapmeans[,i])
}#Now done for conversion to numeric
#Classification
mapcoord$class<as.numeric(mapcoord$NEIGHBORHOOD)
nclass<-dim(mapcoord)[1]
split<-0.8
trainid<-sample.int(nclass,floor(split*nclass))
testid<-(1:nclass)[-trainid]
kmax<-10
knnpred<-matrix(NA,ncol=kmax,nrow=length(testid))
knntesterr<-rep(NA,times=kmax)
for (i in 1:kmax){		# loop over k
knnpred[,i]<-knn(mapcoord[trainid,3:4],mapcoord[testid,3:4],cl=mapcoord[trainid,2],k=i)
knntesterr[i]<-sum(knnpred[,i]!=mapcoord[testid,2])/length(testid)
}
help(knn)
help(knn)
n)
##mappred<-mapcoord[testid,] # What would you use this for?
##mappred$class<as.numeric(mappred$NEIGHBORHOOD)
require(kknn)
kmax<-10
knnpred<-matrix(NA,ncol=kmax,nrow=length(testid))
knntesterr<-rep(NA,times=kmax)
for (i in 1:kmax){		# loop over k
knnpred[,i]<-knn(mapcoord[trainid,3:4],mapcoord[testid,3:4],cl=mapcoord[trainid,2],k=i)
knntesterr[i]<-sum(knnpred[,i]!=mapcoord[testid,2])/length(testid)
}
##mappred<-mapcoord[testid,] # What would you use this for?
##mappred$class<as.numeric(mappred$NEIGHBORHOOD)
library(class)
kmax<-10
knnpred<-matrix(NA,ncol=kmax,nrow=length(testid))
knntesterr<-rep(NA,times=kmax)
for (i in 1:kmax){		# loop over k
knnpred[,i]<-knn(mapcoord[trainid,3:4],mapcoord[testid,3:4],cl=mapcoord[trainid,2],k=i)
knntesterr[i]<-sum(knnpred[,i]!=mapcoord[testid,2])/length(testid)
}
knntesterr
#Clustering
mapobj<-kmeans(mapmeans,5, iter.max=10, nstart=5, algorithm = c("Hartigan-Wong", "Lloyd", "Forgy", "MacQueen"))
fitted(mapobj,method=c("centers","classes"))
mapobj$centers
#
library(cluster)
clusplot(mapmeans, mapobj$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
#
library(fpc)#May need to install.packages("fpc")
install.packages("fpc")
#
library(fpc)#May need to install.packages("fpc")
plotcluster(mapmeans, mapobj$cluster)
#
mapmeans1<-mapmeans[,-c(1,3,4)]
mapobjnew<-kmeans(mapmeans1,5, iter.max=10, nstart=5, algorithm = c("Hartigan-Wong", "Lloyd", "Forgy", "MacQueen"))
fitted(mapobjnew,method=c("centers","classes"))
clusplot(mapmeans1, mapobjnew$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
plotcluster(mapmeans1, mapobjnew$cluster)
ggmap(map) + geom_point(aes(x = mapcoord$Longitude, y = mapcoord$Latitude, size =1, color=mapobjnew$cluster), data = mapcoord)#How to change colors?
ggmap(map) + geom_point(aes(x = mapcoord$Longitude, y = mapcoord$Latitude, size =1, color=mapcoord$NEIGHBORHOOD), data = mapcoord) +theme(legend.position = "none")
help geom_point()
help(geom_point)
ggmap(map) + geom_point(aes(x = mapcoord$Longitude, y = mapcoord$Latitude, size =1, shape='.',color=mapcoord$NEIGHBORHOOD), data = mapcoord) +theme(legend.position = "none")
ggmap(map) + geom_point(aes(x = mapcoord$Longitude, y = mapcoord$Latitude, size =0.5, shape='.',color=mapcoord$NEIGHBORHOOD), data = mapcoord) +theme(legend.position = "none")
ggmap(map) + geom_point(aes(x = mapcoord$Longitude, y = mapcoord$Latitude, size =0.2, shape='.',color=mapcoord$NEIGHBORHOOD), data = mapcoord) +theme(legend.position = "none")
ggmap(map) + geom_point(aes(x = mapcoord$Longitude, y = mapcoord$Latitude, size =0.2, shape='.',alpha=1/5,,color=mapcoord$NEIGHBORHOOD), data = mapcoord) +theme(legend.position = "none")
ggmap(map) + geom_point(aes(x = mapcoord$Longitude, y = mapcoord$Latitude, size =0.2, shape='.',alpha=1/3,,color=mapcoord$NEIGHBORHOOD), data = mapcoord) +theme(legend.position = "none")
ggmap(map) + geom_point(aes(x = mapcoord$Longitude, y = mapcoord$Latitude, size =0.1, shape='.',alpha=1/3,,color=mapcoord$NEIGHBORHOOD), data = mapcoord) +theme(legend.position = "none")
ggmap(map) + geom_point(aes(x = mapcoord$Longitude, y = mapcoord$Latitude, size =0.1, shape='p',alpha=1/3,,color=mapcoord$NEIGHBORHOOD), data = mapcoord) +theme(legend.position = "none")
ggmap(map) + geom_point(aes(x = mapcoord$Longitude, y = mapcoord$Latitude, size =0.1, shape='e',alpha=1/3,,color=mapcoord$NEIGHBORHOOD), data = mapcoord) +theme(legend.position = "none")
ggmap(map) + geom_point(aes(x = mapcoord$Longitude, y = mapcoord$Latitude, size =0.1, shape='e',alpha=1/3,color=mapcoord$NEIGHBORHOOD), data = mapcoord) +theme(legend.position = "none")
mapmeans
adduse
as.numeric
mapmeans
